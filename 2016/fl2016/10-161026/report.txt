関数・論理型プログラミング実験課題第10回レポート

05-161026 平出一郎

########################################
################問１####################
########################################

共通の祖先Zがいると考えて次のような述語を定義しました。
bloodrelative(X,Y) :- ancestor(X,Z) , ancestor(Y,Z).
koboとkojiには血縁関係がありそうですが、祖先の定義が反射的でない(ancecsort(X,X)が一般には成り立たない)のでfalseになっています。

?- ['family.pl'].
% family.pl compiled 0.00 sec, 20 clauses
true.

?- bloodrelative(kobo,koji).
false.

?- bloodrelative(kobo,sanae).
true .

?- bloodrelative(kobo,miho).
true .

########################################
################問２####################
########################################

掛け算はYに関して帰納的に
Y = 0 -> X*Y = 0
Y > 0 -> X*Y = X*(Y-1) + X
とかけることを利用しました。


?- ['arithmetic.pl'].
% arithmetic.pl compiled 0.00 sec, 5 clauses
true.
/* 通常の計算 */
?- mult(z,s(s(z)),Z).
Z = z .

?- mult(s(s(z)),z,Z).
Z = z .

?- mult(s(s(z)),s(s(s(z))),Z).
Z = s(s(s(s(s(s(z)))))) .

?- mult(z,z,Z).
Z = z .
/* 第一引数を使った割り算 */
?- mult(X,s(s(z)),s(s(s(s(z))))).
X = s(s(z)) .

?- mult(X,s(s(s(z))),s(s(s(s(z))))).
false.
/* 第二引数を使った割り算 */
?- mult(s(s(z)),Y,s(s(s(s(z))))).
Y = s(s(z)) .

?- mult(s(s(s(z))),Y,s(s(s(s(z))))).
false.
/* 因数分解(できない) */
?- mult(X,Y,s(s(s(z)))).
ERROR: Out of global stack

########################################
################問３####################
########################################

OCamlのパターンマッチと同じように書きました。

?- reverse([1,2,3],X).
X = [3, 2, 1].

?- reverse([],X).
X = [].

?- concat([],X).
X = [].

?- concat([[1,2,3],[4],[5,6]],X).
X = [1, 2, 3, 4, 5, 6].

########################################
################問４####################
########################################

まずはselectという述語を用いることにしました（selectは組み込みであったので、my_selectという名前で定義しました。）
/* my_select( e , E , E\ {e} ) */
my_select( X , [X|Xs] , Xs ).
my_select( X , [Y|Ys] ,[Y|Zs]) :- my_select(X,Ys,Zs).

次のように動作をします。

?- ['hamilton.pl'].
% hamilton.pl compiled 0.00 sec, 6 clauses
true.

?- my_select(X,[1,2,3],Z).
X = 1,
Z = [2, 3] ;
X = 2,
Z = [1, 3] ;
X = 3,
Z = [1, 2] ;
false.

これは集合XからXの元xとX\{x}の組をすべて列挙すると捉えることができます。

次にpath(S,VS,ES)という述語を定義しました。
これはSから始まる路でESに入っている辺のみでSからVSの点をすべて巡れるという述語で、my_selectを用いてVS,ESから１つずつ要素を取り出して総当りで探索するようになっています。

あとは、各頂点に対してそこを始点とする上の述語を満たす路があるか調べればOKです。

?- hamilton([1,2,3],[(1,2),(2,1)]).
false.

?- hamilton([1,2,3],[(1,2),(1,3)]).
false.

?- hamilton([1,2,3],[(1,2),(2,3)]).
true .
