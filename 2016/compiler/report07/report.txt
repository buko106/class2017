コンパイラ実験第７回課題
05-161026 平出一郎

##########問２##########

+#,-#というint,float両方に使える演算子を追加しました。
ただし異なる型同士の演算には使えません


let rec add i f =
  f+#(float_of_int (i+#1))-# 4.0
in print_float (add 1 2.)

上のプログラムをコンパイルしたときのK正規形を出力したのが以下です。適切な型がついていることがわかります。

LetRec
  add.9:Fun(Int->Float->Float)
  i.10:Int f.11:Float
  Let Ti4.19:Int
    Int 1
    Let Ti5.18:Int
      Add i.10 Ti4.19
      Let Td6.17:Float
        ExtFunApp float_of_int Ti5.18
        Let Td7.15:Float
          FAdd f.11 Td6.17
          Let Td8.16:Float
            Float 4.
            FSub Td7.15 Td8.16
  Let Ti1.13:Int
    Int 1
    Let Td2.14:Float
      Float 2.
      Let Td3.12:Float
        App add.9 Ti1.13 Td2.14
        ExtFunApp print_float Td3.12

#####編集したファイルは以下のとおりです#####

 lexer.mll  |    4 ++++
 syntax.ml  |    4 ++++
 parser.mly |    8 +++++++-
 typing.ml  |    7 +++++++
 kNormal.ml |   18 ++++++++++++++++++

#####変更点について#####
各ファイルの変更点について述べます

########## lexer.mll ##########
+#,-#という演算子を追加する

diff -rN ../02-161026/lexer.mll ../07-161026/lexer.mll
36a37,40
> | "-#"
>     { MINUS_POLY }
> | "+#"
>     { PLUS_POLY }

########## syntax.ml ##########
Syntax.tにAdd_poly,Sub_polyを追加

diff -rN ../02-161026/syntax.ml ../07-161026/syntax.ml
9a10,11
>   | Add_poly of t * t
>   | Sub_poly of t * t
45a48,49
>   | Add_poly (s,t) -> print_st s t n "Add_poly"
>   | Sub_poly (s,t) -> print_st s t n "Sub_poly"

########## parser.mly ##########
トークンを追加し、優先度などを普通の+,-と同じに

diff -rN ../02-161026/parser.mly ../07-161026/parser.mly
13a14,15
> %token MINUS_POLY
> %token PLUS_POLY
47c49
< %left PLUS MINUS PLUS_DOT MINUS_DOT
---
> %left PLUS MINUS PLUS_DOT MINUS_DOT PLUS_POLY MINUS_POLY
89a92,95
> | exp PLUS_POLY exp
>     { Add_poly($1,$3) }
> | exp MINUS_POLY exp
>     { Sub_poly($1,$3) }


########## typing.ml ##########
型推論の時点では+#,-#の左右の型が一致するように、新しい型変数を用意して型推論をする。
int or floatになるようにするのはkNormal.gの内部で行う

diff -rN ../02-161026/typing.ml ../07-161026/typing.ml
29a30,31
>   | Add_poly(e1, e2) -> Add_poly(deref_term e1, deref_term e2)
>   | Sub_poly(e1, e2) -> Sub_poly(deref_term e1, deref_term e2)
99a102,106
>     | Add_poly(e1, e2) | Sub_poly(e1, e2) ->
>         let t = Type.gentyp () in
>         unify t (g env e1);
>         unify t (g env e2);
>         t

########## kNormal.ml ##########
型推論後の型を見てSyntax.Add_poly,Syntax.Sub_polyを適切にKNormal.tの式に割り当てる。型が合わない場合はここでエラーを吐く

diff -rN ../02-161026/kNormal.ml ../07-161026/kNormal.ml
68a69,86
>   | Syntax.Add_poly(e1, e2) ->
>        let _,t1 as g1 = g env e1 in
>        insert_let g1
>          (fun x -> let _,t2 as g2 = g env e2 in
>                    insert_let g2
>              (fun y -> match t1,t2 with
>                        | Type.Int,Type.Int -> Add(x,y), Type.Int
>                        | Type.Float,Type.Float -> FAdd(x,y), Type.Float
>                        | _,_ -> failwith (Printf.sprintf "operator +# expects same type of int or float")))
>   | Syntax.Sub_poly(e1, e2) ->
>        let _,t1 as g1 = g env e1 in
>        insert_let g1
>          (fun x -> let _,t2 as g2 = g env e2 in
>                    insert_let g2
>              (fun y -> match t1,t2 with
>                        | Type.Int,Type.Int -> Sub(x,y), Type.Int
>                        | Type.Float,Type.Float -> FSub(x,y), Type.Float
>                        | _,_ -> failwith (Printf.sprintf "operator -# expects same type of int or float")))

