05-161026 平出一郎

問２以降のソースはinterpreter/内にすべてあります。１つのインタプリタとしてすべて実装してあります。
.../interpreter$ make
でビルドしてください。


########################################
##################問１##################
########################################

####################手でコンパイル####################
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ls
Makefile  OCamlMakefile  example.ml  lexer.mll  parser.mly  syntax.ml
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamllex lexer.mll 
30 states, 1692 transitions, table size 6948 bytes
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlyacc parser.mly 
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -c syntax.ml 
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -c parser.mli 
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -c parser.ml
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -c lexer.ml
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -c example.ml 
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ocamlc -o example syntax.cmo parser.cmo lexer.cmo example.cmo
ichiro@ubuntu:~/sourcecode/fl2016/05-161026/example$ ./example
if x = 0 then 0 else 100+x;;
EIf (EEq (x,0),0,EAdd (100,x))

####################parser.mlyをいじってみる####################
expr:
  | IF expr THEN expr ELSE expr { EIf($2,$4,$6) }
  | expr EQ expr    { EEq($1,$3) }
  | expr LT expr    { ELt($1,$3) }
  | expr PLUS expr  { EAdd($1,$3) }
  | atomic_expr     { $1 }
;
と変えたところshift/reduce conflictが起き、parser.outputを読んだところPLUS,EQ,LTやELSEのあとでconflictしていたので、優先順位を下のように整数演算が優先されるようにしたらconflictが解消されました。
%nonassoc IF THEN ELSE
%left EQ LT
%left PLUS

########################################
##################問２##################
########################################
lexer,parserは与えられていたのでEAddの場合と同じ動作をESub,EMul,EDivでもするようにevalを拡張しました。ただし、0での割り算で例外が発生し強制終了してしまうのでEvalErrを投げるようにして、発展１の拡張でinterpreterが強制終了しないようにしました。

ichiro@ubuntu:~/sourcecode/fl2016/05-161026$ ./interpreter/main
(* 加減乗除の動作例 *)
# 1 - 2 - 3 ;;
- = -4
# 1 - (2 - 3);;
- = 2
# 1 * (2 + 3);;
- = 5
# 2 / (2 - 1);;
- = 2
# 1/0;;
Error: EvalErr("division by zero")  (* これは発展１の拡張*)
########################################
####問３、発展２、発展３(トップレベル)####
########################################
トップレベル宣言は問３、発展２、発展３を同時に処理できるように、まず抽象構文を
type command =
 ...
 | CDecl of (name * expr) list list
 ...

と変更し、parserの時点で
 let v1 = e1 and v2 = e2 let v3 = e3 and v4 = e4;;
を CDecl [[(v1,e1);(v2,e2)] ; [(v3,e3);(v4,e4)]] のように処理しました
１つのリスト(letから次のletまでの間)をそこまでの環境を元に処理してから、まとめで環境を拡張するようにしました。このため
let v1 = e1 and v2 = e2;;ではe2は外側の環境で評価され
let v1 = e1 let v2 = e2;;ではe2がv1を含むときはこの式の中で定義されたv1が用いされるようになってるので、OCamlと同じ挙動をするはずです。
このCDeclを処理する関数はeval.mlの93行目付近のeval_topleveldec_chainです。

またこれに合わせて、eval_commandの返す値を
　(変数名と値のペア)と環境のペア　から
　((変数名と値のペア)のリスト)と環境のペア
に変更し、main関数の表示部分も書き換えたので複数の変数が同時に宣言されても１つずづ表示されるようになりました。eval_topleveldec_chainの中のformattingという関数でうまいこと処理して同じ変数名のものが複数回表示されないようにしました。


(* トップレベル宣言の動作例（問３、発展３）*)
# let a = 1 ;;
val a = 1
# let b = 2 ;;
val b = 2
# let a = 10*b and b = 10*a;;
val a = 20
val b = 10
# a;;
- = 20
# b;;
- = 10
(* トップレベル宣言（発展２）の動作例 *)
# let x = 0 let y=0 let z=0;;
val x = 0
val y = 0
val z = 0
# x;;
- = 0
# y;;
- = 0
# z;;
- = 0
(* let and and と let let letの違いが確認できる*)
# let x = 10 let y=x+1 let z=x*y;; 
val x = 10
val y = 11
val z = 110
# x;;    
- = 10
# y;;
- = 11
# z;;
- = 110
(* let and and let and and..にも対応した*)
# let a = 1;;
val a = 1
# let b = 2;;
val b = 2
# let a = 10*b and b = 10*a let a = b and b = a;;
val a = 10
val b = 20
# a;;
- = 10
# b;;
- = 20

########################################
#########問３、発展３(局所定義)##########
########################################
おなじく発展３に同時に対応するため
ELetの定義を
type expr =
...
  | ELet       of (name * expr) list * expr
...
と変更しました。
let v1 = ex and v2 = e2 in e3は
ELet( [(v1,e1),(v2,e2)] , e3 )
のように構文解析されて、外側の環境でe1,e2を評価してからそれぞれv1,v2に束縛し、それらが追加された環境の上でe3を評価し返すようにしました。

##########動作例##########
# let x = let x = 1 in x*10;;
val x = 10
# x;;
- = 10
# let x = 50 and y = x*2 in x+y;;
- = 70

########################################
##################問４##################
########################################
まずlexer.mllのトークンにLAND,LORというのを追加し
| "&&"         { Parser.LAND }
| "||"         { Parser.LOR }
などと書き加えました
syntax.mlのexprにEAnd(e1,e2),EOr(e1,e2)を追加し
またparser.mlyにも
expr:
(...中略...)
  | bool_expr                   { $1 }
;

bool_expr:
  | expr LAND expr { EAnd($1,$3) }
  | expr LOR  expr { EOr($1,$3) }
;
などと書き加えました。let や ifとreduce shift conflictしたために優先順位を高くした気がします。下のように設定しました。
%nonassoc IN
%nonassoc THEN ELSE
%left LOR
%left LAND
##########動作例##########
# let x = 1;;
val x = 1
# if x<1&&2=2 then true else false;;
- = false
# if x=1&&2=2 then if true&&false then 0 else 1 else 2;;
- = 1
########################################
#################発展１#################
########################################
main.mlの字句解析->構文解析->評価結果を表示
の一連の流れをtry ... with -> で囲み、エラーを捕捉したときはそれぞれに対応したエラーメッセージを表示するようにしました。またEvalErrをEvalErr of stringと拡張し、evalで適切な文字列とともにEvalErrを投げるようにしたのでわかりやすくしました。またエラーで終了しなくなったので# quit ;; で終了するようにしました（これにも例外を使っています。）

##########動作例##########
# 1 & 2 ;;
Error: Lexing error(Unknown Token: &)
# let x 2 in x+1;;
Error: Parsing error
# let x = 2 in x && true;;
Error: EvalErr("bool value was expected in '&&'")
# let x = 0 in 100/x ;;
Error: EvalErr("division by zero")
# #quit;;
