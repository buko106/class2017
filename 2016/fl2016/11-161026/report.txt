第１１回課題
05-161026
平出一郎

########################################
################問１####################
########################################

ancestor(X,Y) :- ancestor(Z,Y) , parent(X,Z).
ancestor(X,Y) :- parent.

これはすべての問い合わせが最初に１行目にマッチするので、
例えばancestor(kobo,iwao).という問い合わせは
ancestor(kobo,iwao)
-> ancestor(A,iwao) , parent(kobo,A)
-> ancestor(B,iwao) , parent(A,B) , parent(kobo,A)
-> ancestor(C,iwao) , parent(B,C) , parent(A,B) , parent(kobo,A)
-> ....
というように常にサブゴールが増え続けるので、問い合わせは終了しない。

########################################
################問２####################
########################################

nat_list([z,s(z),z]).

nat(z).やnat(s(z)).は成功するので、
nat_list([z,s(z),z])
->nat_list([s(z),z])
->nat_list([z])
->nat_list([])
->
となり問い合わせは成功する。
----------------------------------------
?- nat_list([z,X]).
X = z ;
X = s(z) ;
X = s(s(z)) ;
X = s(s(s(z))) ;
X = s(s(s(s(z)))) ;
X = s(s(s(s(s(z))))) ;
X = s(s(s(s(s(s(z)))))) ;
X = s(s(s(s(s(s(s(z))))))) ;
X = s(s(s(s(s(s(s(s(z)))))))) 

必ず成功するnat(z)を省略すると
nat_list([z,X])
->nat_list([X])
->nat(X)
結局nat(X).の単一化子を列挙するだけになるので上のように動作する。
----------------------------------------
nat_list(X).の問い合わせはこのようになる。

?- nat_list(X).
X = [] ;
X = [z] ;
X = [z, z] ;
X = [z, z, z] ;
X = [z, z, z, z] ;
X = [z, z, z, z, z] ;
X = [z, z, z, z, z, z] ;
X = [z, z, z, z, z, z, z] ;
X = [z, z, z, z, z, z, z, z] ;
X = [z, z, z, z, z, z, z, z, z] ;
X = [z, z, z, z, z, z, z, z, z|...] ;
X = [z, z, z, z, z, z, z, z, z|...] 

これは
nat_list(X)がまず定義の一行目と単一化されてX=[]となり
さらに問い合わせを続けると二行目と単一化されてX=[N|Y]
nat(N) , nat_list(Y)
はじめにnatから帰ってくる単一化はN=z,
YはXがはじめにX=[]となったようにY=[]なので、以上からX=[z],
次にYに関して再びnat_listの定義の二行目にマッチし…以降これを繰り返す

なのでnat_list(X), X=[s(Y)].はX=[s(Y)]と単一化できないので 問い合わせが終了しない。
########################################
################問３####################
########################################

述語win(A1,A2,A3,B1,B2,B3,C1,C2,C3,P)は盤面がPの手番として必勝かどうか判定します。
まる->o
ばつ->x
あき->b
で表現して渡します。
盤面は次のように表現します
A1|A2|A3
--------
B1|B2|B3
--------
C1|C2|C3

一手進めた、ある盤面〜といった判定は９つのマスすべてを試すように述語の定義を９回にして対応しました。
一手進めた任意の盤面〜といった判定は９つのマスに対応する述語を用意して、それらをすべて調べるようにしました。

次のようにスライドで求められている勝敗判定は正しく動きました。
動作例
?- \+ win(b,b,b,b,b,b,b,b,b,o).
true.

?- \+ lose(b,b,b,b,b,b,b,b,b,o).
true.

?- win(o,b,b,x,b,b,b,b,b,o).
true.

?- lose(o,b,b,x,b,b,b,b,b,o).
false.

?- win(b,b,b,x,o,b,b,b,b,o).
true.

?- lose(b,b,b,x,o,b,b,b,b,o).
false.

?- win(b,o,b,x,b,b,b,b,b,o).
true.

?- lose(b,o,b,x,b,b,b,b,b,o).
false.



########################################
###############発展１###################
########################################
