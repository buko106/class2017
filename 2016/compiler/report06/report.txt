05-161026
平出一郎
コンパイラ実験06


##########問１##########

自分の班のコンパイラを使用してgdcをコンパイルした結果が以下です
アセンブリの仕様はdisp命令(シミュレータ用表示命令)以外はMIPSの命令と同じです。
詳しいISAは次のアドレスから閲覧できます
https://drive.google.com/open?id=1JPp0P97XS5G8uEYA3xvgIA3u35P5bC4LlEXNKGIB7-k

特殊レジスタとして
$spがスタックポインタ$raがリターンアドレス用リンクレジスタ
があります


/* #####通常のコンパイル結果##### */
disp	0
jal	main
disp	1
gcd.7:
	subi	$k0,$4, 0        # mが0以上か判定
	bgez	$k0, ble_else.17 # mが0以上か判定
	mov	$4, $5
	jr $ra
ble_else.17:
	subi	$k0,$4, $5       # m>=nか判定
	bgez	$k0, ble_else.18 # m>=nか判定
	sub	$5, $5, $4
	j	gcd.7            # 末尾呼び出し
ble_else.18:
	sub	$4, $4, $5
	mov	$24, $5
	mov	$5, $4
	mov	$4, $24
	j	gcd.7            # 末尾呼び出し
main:
	li	$4, 21600        # 第一引数の読み込み
	lui	$5, 5            # 第二引数の読み込み
	ori	$5, $5, 9820     # 第二引数の読み込み
	sw	$ra, -4[$sp]
	subi	$sp, $sp, 8
	jal	gcd.7
	addi	$sp, $sp, 8
	lw	$ra, -4[$sp]
	sw	$ra, -4[$sp]
	subi	$sp, $sp, 8
	jal	min_caml_print_int
	addi	$sp, $sp, 8
	lw	$ra, -4[$sp]
	jr	$ra

/* #####末尾再帰最適化がない場合に想定される結果##### */
disp	0
jal	main
disp	1
gcd.7:
	subi	$k0,$4, 0        # mが0以上か判定
	bgez	$k0, ble_else.17 # mが0以上か判定
	mov	$4, $5
	jr $ra
ble_else.17:
	subi	$k0,$4, $5       # m>=nか判定
	bgez	$k0, ble_else.18 # m>=nか判定
	sub	$5, $5, $4
        sw      $ra, -4[$sp]     # リンクレジスタの値をスタックに積む
        addi    $sp, $sp, 8      # スタックを伸ばす
	jal	gcd.7            # 通常の呼び出し
	addi	$sp, $sp, 8      # スタックを元にもどす
        lw      $ra, -4[$sp]     # リターンアドレスをリストア
        j       $ra              # リターン
ble_else.18:
	sub	$4, $4, $5
	mov	$24, $5
	mov	$5, $4
	mov	$4, $24
        sw      $ra, -4[$sp]     # リンクレジスタの値をスタックに積む
        addi    $sp, $sp, 8      # スタックを伸ばす
	jal	gcd.7            # 通常の呼び出し
	addi	$sp, $sp, 8      # スタックを元にもどす
        lw      $ra, -4[$sp]     # リターンアドレスをリストア
        j       $ra              # リターン
main:
	li	$4, 21600        # 第一引数の読み込み
	lui	$5, 5            # 第二引数の読み込み
	ori	$5, $5, 9820     # 第二引数の読み込み
	sw	$ra, -4[$sp]
	subi	$sp, $sp, 8
	jal	gcd.7
	addi	$sp, $sp, 8
	lw	$ra, -4[$sp]
	sw	$ra, -4[$sp]
	subi	$sp, $sp, 8
	jal	min_caml_print_int
	addi	$sp, $sp, 8
	lw	$ra, -4[$sp]
	jr	$ra


上のように
	j	gcd.7            # 末尾呼び出し
の部分が
        sw      $ra, -4[$sp]     # リンクレジスタの値をスタックに積む
        addi    $sp, $sp, 8      # スタックを伸ばす
	jal	gcd.7            # 通常の呼び出し
	addi	$sp, $sp, 8      # スタックを元にもどす
        lw      $ra, -4[$sp]     # リターンアドレスをリストア
        j       $ra              # リターン
のように冗長なリターンアドレスのstore,restoreが増えて、効率の悪いコードになる

##########問２##########

q2.mlの中身を以下に示す

let rec ack x y =
  if x <= 0 then y + 1
  else if y <= 0 then ack (x -1) 1
  else ack (x -1) (ack x (y-1))
in print_int (ack 3 10);;

let rec ack' x y k =
  if x <= 0 then k (y + 1)
  else if y <= 0 then ack' (x -1) 1 k
  else ack' x (y-1) (fun z -> ack' (x-1) z k)
in ack' 3 10 (fun r -> print_int r)

(* Ocamlインタプリタでの実行例 *)

# #use "q2.ml";;
8189- : unit = ()
8189- : unit = ()

##########問３##########

int型2要素のレコードの第２要素を取り出すプログラムsnd.mlをx86アセンブリにコンパイルしました。

type pair = { x:int ; y:int }
let snd xy = xy.y

以下は呼び出しポイントからリターンの部分を抜き出したものです。

camlSnd:
	.quad	1
	.data
	.quad	3063
camlSnd__1:
	.quad	camlSnd__snd_1011
	.quad	3
	.text
	.align	16
	.globl	camlSnd__snd_1011
camlSnd__snd_1011:
	.cfi_startproc
.L100:
	movq	8(%rax), %rax
                # 引数のアドレス+8のアドレスから要素を取り出す
	ret
                # リターン

このようにレコードは組としてコンパイルされて、先頭要素へのポインタが引数として渡されて、要素へのアクセスはポインタ+オフセットでなされていることがわかりました。
