関数・論理型プログラミング実験オセロ課題レポート
05-161026 平出一郎

・工夫

int64の変数２つを用いたbit boardで盤面を管理しました。これを用いた効率の良い(少なくともメモリアクセスが少ないであろう)合法手の判定や裏返し処理などがありました。また探索の過程において盤面を元に戻す操作も不要になるので配列より効率良くなったと思います。これは次を参考にしました。
Edaxのソースコード  http://abulmo.perso.neuf.fr/
オセロにおけるビットボード  https://ja.wikipedia.org/wiki/%E3%82%AA%E3%82%BB%E3%83%AD%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%93%E3%83%83%E3%83%88%E3%83%9C%E3%83%BC%E3%83%89

探索アルゴリズムの基本であるmin-max法を改良した（同じ結果が得られ、より効率の良い）alpha-beta法による探索で先読みをします。次の深さを呼び出すときに正負逆の値を得ることでalpha-beta法を一つの関数で実現しました。(negamax法と同じような感じ)提出したplay.mlでの読みの深さは次のような感じです(c=石の数)として depth = match c with | c when c >= 52 -> 12 | c when c >= 40 ->  8 | c ->  6

評価関数は
・重みなし開放度（（自分のおける場所の数ー相手のおける場所の数）に比例した値）
・石の重み（おいてある場所につき自分の石ならその分点数を＋、相手の石ならー）
を用いています。上の２つの比率や場所による石の重みは手で決めたので適当です。

・対戦結果
ランダムとの勝率は９割程度です。その中で最も感じた問題は、敵が角に置けるようになる手をかなりの頻度で打ってしまうことです。これは着手可能点に重みが無いので、相手が角に打てるということで評価値が下がらないのが原因だと思います。



次のような改善を考えました。
・ハッシュを用いた高速化
探索途中（のある程度の深さ）で同じ局面が出てくることがあるので、そこでのalpha値,beta値をハッシュに入れておくことで前の探索での結果が使えることがる。
・評価関数の決め方。
序~中盤では開放度、終盤では石の数が大事になるなど、全く同じ基準で評価ができると思えないので石の重みや着手可能位置の重みを線形関数で表す。
